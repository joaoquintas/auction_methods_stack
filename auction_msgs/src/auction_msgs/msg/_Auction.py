"""autogenerated by genmsg_py from Auction.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import roslib.rostime
import std_msgs.msg

class Auction(roslib.message.Message):
  _md5sum = "003387503e87218848189bfdbbf986d1"
  _type = "auction_msgs/Auction"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string command
string task_type_name
string subject
string metrics
duration length
geometry_msgs/Point task_location

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['header','command','task_type_name','subject','metrics','length','task_location']
  _slot_types = ['Header','string','string','string','string','duration','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,command,task_type_name,subject,metrics,length,task_location
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Auction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.command is None:
        self.command = ''
      if self.task_type_name is None:
        self.task_type_name = ''
      if self.subject is None:
        self.subject = ''
      if self.metrics is None:
        self.metrics = ''
      if self.length is None:
        self.length = roslib.rostime.Duration()
      if self.task_location is None:
        self.task_location = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg._Header.Header()
      self.command = ''
      self.task_type_name = ''
      self.subject = ''
      self.metrics = ''
      self.length = roslib.rostime.Duration()
      self.task_location = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_type_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.subject
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.metrics
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i3d.pack(_x.length.secs, _x.length.nsecs, _x.task_location.x, _x.task_location.y, _x.task_location.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.length is None:
        self.length = roslib.rostime.Duration()
      if self.task_location is None:
        self.task_location = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.task_type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.subject = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.metrics = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.length.secs, _x.length.nsecs, _x.task_location.x, _x.task_location.y, _x.task_location.z,) = _struct_2i3d.unpack(str[start:end])
      self.length.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.task_type_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.subject
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.metrics
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i3d.pack(_x.length.secs, _x.length.nsecs, _x.task_location.x, _x.task_location.y, _x.task_location.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.length is None:
        self.length = roslib.rostime.Duration()
      if self.task_location is None:
        self.task_location = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.task_type_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.subject = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.metrics = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.length.secs, _x.length.nsecs, _x.task_location.x, _x.task_location.y, _x.task_location.z,) = _struct_2i3d.unpack(str[start:end])
      self.length.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2i3d = struct.Struct("<2i3d")
